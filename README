HigherExplosives
================

A very simple plugin to control the destructive potential of explosions in Minecraft, for use with the Craftbukkit and Bukkit modding system.
In its default vanilla configuration it just doubles the size of TNT explosions.

TNT, creepers, and fireballs can all have their size and yield (percentage of destoyed items dropped) tweaked. The size can optionally be chosen from a list of different sizes, according to specified probabilities.
These tweaks can be selectively applied to several different worlds.

Versions
--------

HigherExplosives v1.4 was tested with CraftBukkit server recommended versions 440 and 493 (http://ci.bukkit.org/job/dev-CraftBukkit/493/artifact/target/craftbukkit-0.0.1-SNAPSHOT.jar) and a Minecraft 1.3_01 client.

Installation
------------

Installation is a simple matter of placing the HigherExplosives.jar file into your CRAFTBUKKIT/plugins directory. No configuration is necessary to give it a test, but a default configuration will automatically be created as CRAFTBUKKIT/plugins/HigherExplosives/config.yml

Configuration
-------------

This default configuration is:

everyExplosion:
    yield: 0.3
entities:
    Creeper:
        radiusMultiplier: 1.0
        fire: false
    TNTPrimed:
        radiusMultiplier: 2.0
        fire: false
    Fireball:
        radiusMultiplier: 1.0
        fire: false
version: '1.3.1'


- The everyExplosion.yield option dictates what percentage of blocks destroyed in an explosion will drop an item. It is a value between 0.0 (no blocks) and 1.0 (every single block). This value applies to explosions coming from any entity. The Minecraft default is 0.3 (30%).

- There are three different entities that create explosions (tell me if this is wrong): TNTPrimed, a Fireball (Ghasts), and a Creeper. Each of these are individually configured.

- In its simples form the radiusMultiplier is just a number that will be used to multiply the radius of the blast. 0.5 gives half size explosions, whilst 2.0 blasts will be twice as big as normal. After igniting TNT by hand, you can run away in time when it's set to a multiplier of 2, but with a multiplier of 3 there's not enough time to run away! The readiusMultiplier can also describe a number of different multipliers with different probabilities of being chosen. See the "Random blast radii" section of the README file for more details.

- The fire property is included for completeness. I didn't see any difference when I tested it myself, but it probably flags whether the explosion causes fire or not.

- The version property is mandatory but it just lets the plugin show a warning if the configuration version is different to the plugin version. If it's missing, the configuration is considered to be missing and the default configuration will be written to the file probably overwriting anything that might be there.


To help check and/or diagnose what the plugin thinks the configuration is, use the "debugConfig: true" property. It defaults to false if not specified.


Multi world configuration
-------------------------

The configuration above is the default for all worlds.

It's possible to make specific worlds behave differently. e.g. a configuration like..

worlds:
    netherworld:
        everyExplosion:
            yield: 0.0
        entities:
            TNTPrimed:
                radiusMultiplier: 0.25

..would render TNT fairly impotent in the world called "netherworld".
If the other entities are not given a configuration for this world, then they will take on the default configuration for all worlds. Likewise for the activebounds property.
The same is true for explosion yields (and yield bounds) if the "everyExplosion" property is not given for the specific world.

Just to be sure, add the "debugConfig: true" property to see what the plugin will be using.

You can add as many specific worlds as you like. e.g.:

worlds:
    netherworld:
        blah blah..
    nuclearCreeper:
        entities:
            Creeper:
                radiusMultiplier: 2.0
    survivalIsland:
        entities:
            Creeper:
                radiusMultiplier: 1.0
                fire: true
            TNTPrimed:
                radiusMultiplier: 0.0
debugConfig: true


Random blast radii
------------------

It's possible to make TNT, creepers or fireballs explode with a random blast radius. This is configured by the radiusMultipler in the following way:

entities:
    Creeper:
        radiusMultiplier:
            - {chance: 0.15, value: 2.0}
            - {chance: 0.80, value: 1.0}
            - {chance: 0.05, value: 0.0}
    TNTPrimed:
        blah blah

That would make creepers explode normally 80% of the time, explode a lot more fiercly 15% of the time, and fizzle out 5% of the time. There can be any number of these "chance"/"value" pairs in the list, but the chances should all add up to 1.0 (100%).

This list form for the radiusMultiplier also works for entities in multi-world configurations.

Optional bounds configuration
-----------------------------

There is an optional configuration property (called "activeBounds") for restricting the explosion modifications to those whose epicentre's lie within some configured bounds..
For example, the following will only let the TNTPrimed explosions be modified when the epicentre's Y coordinate is below 10 (i.e. explosions only modified if the TNT block's altitude is below 10):

    TNTPrimed:
        activeBounds:
            max:
                y: 10


More restrictive bounding boxes can be specified. For example, the following will neutralize creepers within some protected 20x20x20 cuboid zone:

    Creeper:
        radiusMultiplier: 0.0
        activeBounds:
            max:
                x: 10
                y: 10
                z: 10
            min:
                x: -10
                y: -10
                z: -10

Any of the bounds may be left off to relax the restrictions.

If an entity has no activeBounds property then the explosion modifications will always be applied no matter where it happens.


Unfortunately in the current version, the yield modifications of explosions is applied to every single explosion regardless of whether it's within its activeBounds or not.
Some coarse grained control can be had over this by applying some general bounds in which explosions (of any and all types) will have their yield modified.
For example, the following configuration fragment will make all explosions below an altitude of 10 yield no objects (perhaps useful to avoid nuclear sized underground explosions from hurting the server with too many items?). Any explosion above this altitude will not have its yield modified:

everyExplosion:
    yield: 0.0
    yieldChangeActiveBounds:
        max:
            y: 10


Changelog:
---------

Version 1.4
- Support for setting probabilities for different blast radii

Version 1.3.1
- Fixed a configuration bug with single world configurations.

Version 1.3
- Support for multiple world configurations
- Added a debugConfig boolean configuration property for checking and diagnosing the configuration.

Version 1.2
- Added optional bounds checking for explosions (the "activeBounds" property). If the explosion epicentre is within the allowed bounds then the explosion modifications are applied.
- The "everyExplosionYield" configuration key has changed to "everyExplosion.yield".
- New "everyExplosion.yieldChangeActiveBounds" property controls areas in which explosions will have their yield modified
- Config files are automatically upgraded from versions 1.0 and 1.1 to 1.2.

Version 1.1
- Fixed a bug where all explosions were doubled regardless of configuration.

Version 1.0
- Can control size of explosions
- Can control yield of all explosions

toadmess (https://github.com/toadmess)
