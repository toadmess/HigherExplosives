HigherExplosives
================

A very simple plugin to control the destructive potential of explosions in Minecraft, for use with the Craftbukkit server and Bukkit modding system.
In its default vanilla configuration it just doubles the size of TNT explosions.

TNT, creepers, and fireballs can all have their size, yield (percentage of destoyed items dropped) and damage (to items and/or players and/or creatures) tweaked. Terrain damage from explosions can be toggled on or off.
The fuse length of TNT can be multiplied to be shorter or longer.

The explosion size, player damage, and creature damage can all be configured to be chosen randomly from a list of different values according to specified probabilities.

All tweaks can be selectively applied to several different worlds.

HigherExplosives v2.0 was tested with recommended build 860 and a Minecraft 1.6.6 client.

Features
--------

- Control the size of explosions for TNT, creepers and ghast fireballs.
- Control the percentage of dropped items (called yield) from the destroyed blocks, from no items dropped through to one item dropped per destroyed block.
- The yield of every different block type can be individually configured if so desired.
- Optional prevention of terrain damage
- Multiple world configurations
- Blast radii can be configured, with different probabilities for each being chosen
- Player damage can be configured (optionally with different probabilities for each being chosen)
- Creature damage can be configured (optionally with different probabilities for each being chosen)
- Item damage can be configured (optionally with different probabilities for each being chosen)
- Fuse length of TNT can be tweaked.
- Explosions can be nullified altogether (just set the blast radius to 0)
- Restrict explosion modifications to certain area bounds
- TNT triggered by redstone, fire, explosion, or by a player's hand can be configured separately
- The triggering of TNT can be prevented (either generally, or specifically for fire, explosion, hand, or redstone)
- Permissions support for TNT triggered by hand. Any number of different configurations for players with certain permissions and/or groups can be applied.
- Charged creeper's explosions can be configured

Known Issues
------------

- If you set the yield too high, the server will lag a lot whilst trying to rotate all of the items left in the crater.
- If the radiusMultiplier is much less than 1, I think the client is sometimes rendering the explosions as normal, but then corrects itself a moment afterwards when it hears about what really happened from the server. This has a kind of double-take effect.
- If the radiusMultiplier is set too high, the shape of the terrain damage takes on a kind of streaking or criss-crossing effect. I think this is to do with the way minecraft creates the explosions (http://www.minecraftwiki.net/wiki/Explosion).

Installation
------------

Installation is a simple matter of placing the HigherExplosives.jar file into your CRAFTBUKKIT/plugins directory. No configuration is necessary to give it a test, but a default configuration will automatically be created as CRAFTBUKKIT/plugins/HigherExplosives/config.yml.

This default configuration is:

entities:
    TNTPrimed:
        radiusMultiplier: 2.0
        yield: 0.15
version: '2.0'

Example configuration
---------------------

Here's a sizeable example configration that covers most of the simple features, together with an explanation below it:

entities:
    TNTPrimed:
        yield: 0.15
        radiusMultiplier: 2.0
    Creeper:
        preventTerrainDamage: true
        activeBounds:
            max:
                x: 500
                z: 500
            min:
                x: -500
                z: -500
worlds:
    world_nether:
        entities:
            TNTPrimed:
                playerDamageMultiplier: 2.0
                itemDamageMultiplier: 0.0
            Fireball:
                fire: false
                creatureDamageMultiplier: 2.0
    wildwest:
        entities:
            TNTPrimed:
                radiusMultiplier:
                    - {chance: 0.25, value: 0.3}
                    - {chance: 0.25, value: 1.5}
                    - {chance: 0.5, value: 1.0}
                tntFuseMultiplier:
                    - {chance: 0.5, value: 0.0}
                    - {chance: 0.5, value: 1.0}
            Creeper:
                yield: 0.0
                yieldSpecific:
                    2: 0.8  # Grass
                    3: 0.8  # Dirt
                    12: 0.8 # Sand
version: '2.0'
debugConfig: true

In this example config, the size of TNT explosions are doubled and the number of items they drop is set at 15%. This would by applied by default in all worlds except the world named "world_nether" and the world named "wildwest".

In the world named "world_nether", TNT explosions will have a normal blast radius and yield, but nearby items will be impervious to them. Whilst they don't damage items, TNT explosions in the nether will be twice as damaging to players when exploding, but creatures will take damage as normal.

By default, creepers will not damage terrain in a 1000x1000 square area around 0,0. They will however still damage creatures and players as normal. Outside of the safety area, the terrain will be damaged as normal by Creepers. This applies to all worlds with this example configuration because no other world has a specific configuration for the Creeper entity.

Ghast fireballs in the "world_nether" world will not cause fire but will be twice as damaging to other creatures. They'll damage players as normal fireballs do. Fireball explosions in any other world will be left unmodified.

In the wildwest world, TNT is flakey and unreliable. 50% of the time TNT will explode immediately without any fuse. The sizes of the TNT explosions will also vary, with half of them being normal, a quarter being very small, and a quarter being fairly large.

Creeper explosions in the wildwest will cause destroyed grass, dirt and sand blocks to drop items 80% of the time. All other destroyed blocks will drop nothing.

To check if the plugin is reading the configuration correctly, you can add a "debugConfig: true" property. It defaults to false if it's not in the config file.

Main Configuration Properties
-----------------------------

- There are three different entities that create explosions: "TNTPrimed", a "Fireball" (Ghasts), and a "Creeper". Each of these can be individually configured.

- "yield": dictates what percentage of blocks destroyed in an explosion will drop an item. It is a value between 0.0 (no blocks) and 1.0 (every single block). This value can apply to explosions coming from any entity. The Minecraft default is 0.3 (30%).

- "yieldSpecific": more specific than the "yield" property, this allows each block type to have a different yield value. Any block destroyed in an explosion that does not have a value here will fall back to using the "yield" property, or if that is missing, will be left unaffected (i.e. probably will use the minecraft default of 0.3). See the "Specific yields" section of the README file for more details.

- "radiusMultiplier": in its simplest form it is just a number that will be used to multiply the radius of the blast. 0.5 gives half size explosions, whilst 2.0 blasts will be twice as big as normal. After igniting TNT by hand, you can run away in time when it's set to a multiplier of 2, but with a multiplier of 3 there's not enough time to run away! The radiusMultiplier can also describe a number of different multipliers with different probabilities of being chosen. See the "Randomly chosen values" section of the README file for more details.

- "playerDamageMultiplier": like the "radiusMultiplier" property, the value of this is a multiplier applied to the damage dealt to players caught in the explosion radius. A value of 0.0 will nullify all damage to players, whilst a value of 2.0 will double the damage. The playerDamageMultiplier can also describe a number of different multipliers with different probabilities of being chosen. See the "Randomly chosen values" section of the README file for more details.

- "creatureDamageMultiplier": like the "playerDamageMultiplier" property, the value of this is a multiplier applied to the damage dealt to creatures caught in the explosion radius. A value of 0.0 will nullify all damage to creatures, whilst a value of 2.0 will double the damage. The creatureDamageMultiplier can also describe a number of different multipliers with different probabilities of being chosen. See the "Randomly chosen values" section of the README file for more details.

- "itemDamageMultiplier": takes the same form as the other multipliers above, but applies to any non-living entities caught in the blast (including items on the ground, paintings and other things like that). Set it to 0.0 to stop items from being destroyed in blasts.

- "tntFuseMultiplier": It takes the same muliplier form as the "radiusMultiplier" and will multiply the normal length of TNT's fuses. It will affect the fuse length of TNT primed by hand, by fire, by other explosions (including creepers and fireballs), and by redstone. It only makes sense to have this property on a TNTPrimed entity's configuration (or one of its nested configurations).

- "tntPrimePrevented": This will prevent any TNT blocks from being primed, or activated, by fire, redstone, player, or explosion. In each of these cases the TNT block will remain unaffected, unless it's caught in an explosion, in which case it will simply be destroyed rather than triggering another explosion. It only makes sense to have this property on a TNTPrimed entity's configuration (or one of its nested configurations).

- "fire": If true (like the minecraft default for ghast fireballs) the explosion will spray fire around in the crater. If false, it will not. This can be used for TNTPrimed, Creeper, or Fireball entities.

- "preventTerrainDamage": if true, the explosions cause no damage to terrain. Defaults to false if it's missing.

- "version": a mandatory property, but it just lets the plugin show a warning if the configuration's version is different to the plugin's version. If it's missing, the configuration is considered to be missing and the default configuration will be written to the file probably overwriting anything that might be there.

- "debugConfig": helps check and/or diagnose what the plugin thinks the configuration is. Use "debugConfig: true" to turn it on. It defaults to false if not specified.

- "creeperCharged": This allows a specific configuration for Creeper explosions when those creepers are charged by lightning. See the "Nested Configurations" section of the README file for more details on how to use this kind of configuration property. It only makes sense to have this property on a Creeper entity's configuration.

- "tntPrimeByHand": Allows a specific configuration for TNT blocks that are activated by a player hitting them. See the "Nested Configurations" section of the README file for more details on how to use this kind of configuration property. It only makes sense to have this property on a TNTPrimed entity's configuration.

- "tntPrimeByRedstone": Allows a specific configuration for TNT blocks that are activated by redstone. See the "Nested Configurations" section of the README file for more details on how to use this kind of configuration property. It only makes sense to have this property on a TNTPrimed entity's configuration.

- "tntPrimeByFire": Allows a specific configuration for TNT blocks that are activated by fire. See the "Nested Configurations" section of the README file for more details on how to use this kind of configuration property. It only makes sense to have this property on a TNTPrimed entity's configuration.

- "tntPrimeByExplosion": Allows a specific configuration for TNT blocks that are activated by any kind of explosion (including those from Creepers, Fireballs, TNTPrimed, or other plugins). See the "Nested Configurations" section of the README file for more details on how to use this kind of configuration property. It only makes sense to have this property on a TNTPrimed entity's configuration.

- "permissionsBasedConfigs": Allows zero, one, or more specific configuration to be used when a TNTPrimed entity is activated by a player's hand. Depending on the permissions and/or groups that the player has (as set up in the Permissions plugin), their TNT's explosions can take on very different configurations. This is a nested configuration that can lie underneath the "tntPrimeByHand" nested configuration. See the "Nested Configurations" section for general background details on the "tntPrimeByHand" property, but for specific details look to the "Permissions Based Configurations" section of the README file.


Multi world configuration
-------------------------

The configuration above is the default for all worlds.

It's possible to make specific worlds behave differently. e.g. a configuration like..

entities:
    TNTPrimed:
        radiusMultiplier: 2.0
        preventTerrainDamage: true
    Creeper:
        radiusMultiplier: 0.0
worlds:
    netherworld:
        entities:
            TNTPrimed:
                radiusMultiplier: 0.25

..would render TNT fairly impotent in the world called "netherworld", but for all other worlds, TNT both explodes twice as big and doesn't damage terrain. If no other entities are given a configuration in the "netherworld", then they will take on the default configuration for all worlds (so in this example, a Creeper in the "netherworld" will not make any explosion). However, note that the TNTPrimed configration in the "netherworld" does not inherit any properties from the default TNTPrimed configuration, so in this example TNT explosions in the "netherworld" will not prevent terrain damage.

Just to be sure, add the "debugConfig: true" property to see what the plugin will be using.

You can add as many specific worlds as you like. e.g.:

worlds:
    netherworld:
        blah blah..
    nuclearCreeper:
        entities:
            Creeper:
                radiusMultiplier: 2.0
    survivalIsland:
        entities:
            Creeper:
                radiusMultiplier: 1.0
                fire: true
            TNTPrimed:
                radiusMultiplier: 0.0
debugConfig: true


Randomly chosen values
----------------------

It's possible to make TNT, creepers or fireballs explode with a random blast radius. This is configured by the radiusMultipler in the following way:

entities:
    Creeper:
        radiusMultiplier:
            - {chance: 0.15, value: 2.0}
            - {chance: 0.80, value: 1.0}
            - {chance: 0.05, value: 0.0}
    TNTPrimed:
        blah blah

That would make creepers explode normally 80% of the time, explode a lot more fiercly 15% of the time, and fizzle out 5% of the time. There can be any number of these "chance"/"value" pairs in the list, but the chances should all add up to 1.0 (100%).

This list form for the radiusMultiplier also works for entities in multi-world configurations.

In much the same way, player damage, creature damage, item damage, and fuse lengths can be randomly selected from a predefined list of chances and values. e.g.:

entities:
    Creeper:
        creatureDamageMultiplier:
            - {chance: 0.15, value: 2.0}
            - {chance: 0.80, value: 1.0}
            - {chance: 0.05, value: 0.0}
        playerDamageMultiplier:
            - {chance: 0.15, value: 2.0}
            - {chance: 0.80, value: 1.0}
            - {chance: 0.05, value: 0.0}

Note that the randomly chosen multipliers are independent of each other. i.e. they don't use the same random number. It's possible in the example above for an explosion to damage creatures with a 2.0 multiplier whilst the same explosion damages players with a 0.0 multipler.

Optional bounds configuration
-----------------------------

There is an optional configuration property (called "activeBounds") for restricting the explosion modifications to those whose epicentre's lie within some configured bounds..
For example, the following will only let the TNTPrimed explosions be modified when the epicentre's Y coordinate is below 10 (i.e. explosions only modified if the TNT block's altitude is below 10):

    TNTPrimed:
        activeBounds:
            max:
                y: 10


More restrictive bounding boxes can be specified. For example, the following will neutralize creepers within some protected 20x20x20 cuboid zone:

    Creeper:
        radiusMultiplier: 0.0
        activeBounds:
            max:
                x: 10
                y: 10
                z: 10
            min:
                x: -10
                y: -10
                z: -10

Any part of the bounds may be left off to relax the restrictions.

If an entity has no activeBounds property then the explosion modifications will always be applied no matter where it happens.

Specific yields
---------------

The optional configuration property "yieldSpecific" can set a yield (percentage chance between 0 and 1 for a destroyed block to drop an item) for many different block types. Formally, it is a map of block ID's (integer) to yields (float).
The block IDs for different blocks can be found at http://www.minecraftwiki.net/wiki/Data_Values#Block_IDs_.28Minecraft_Beta.29

As an example, this configuration (which was complete as of Minecraft 1.6) will always drop items for every single ore block caught in a TNT explosion, but any other block is left with the standard Minecraft drop chance of 30%:

    TNTPrimed:
        yieldSpecific:
            14: 1.0   # Gold ore
            15: 1.0   # Iron ore
            16: 1.0   # Coal ore
            21: 1.0   # Lapis lazuli ore
            56: 1.0   # Diamond ore
            73: 1.0   # Redstone ore
            74: 1.0   # Glowing redstone ore (hmm)
            89: 1.0   # Glowstone

The "yield" property provides a default yield for blocks that aren't in the "yieldSpecific" map. So the following example will always drop items 100% of the time for all blocks except dirt, grass and sand when caught in creeper explosions:

    Creeper:
        yield: 1.0
        yieldSpecific:
            2: 0.0   # Grass blocks
            3: 0.0   # Dirt blocks
            12: 0.0  # Sand blocks

Nested Configurations
---------------------

Some properties describe a different way in which an entity explodes. For example, the "creeperCharged" property only applies when a creeper explodes after having been charged bu lightning. Or, for example, the "tntPrimeByFire" property only applies when a TNT block is consumed by fire and its fuse is primed for explosion.

These kinds of property can include any of the normal properties, so the resulting explosion can be radically changed from the usual configuration for that entity. As an example, the following configuration will make Creeper explosions spray fire all over if, and only if, those creepers have been charged by lightning:

    Creeper:
        creeperCharged:
            fire: true   # Charged creepers spray fire everywhere!

If a property is not present in a nested configuration, but is present in the parent configuration, then the nested configuration will inherited the parent's property. For example, the config below will make both normal creepers and charged creepers explode with twice the default blast radius.

    Creeper:
        radiusMultiplier: 2.0
        creeperCharged:
            fire: true

If this nested configuration's inheritance of parent properties is not desired, the property must be explicitly set in the nested configuration. The example below will cause normal creepers to have twice the default blast radius, and cause charged creepers to have 4 times the normal blast radius (and spray fire everywhere).

    Creeper:
        radiusMultiplier: 2.0
        creeperCharged:
            radiusMultiplier: 2.0
            fire: true

Any number of properties can be included in the nested configuration (but any further nested configurations will just be ignored as it doesn't make much sense).

TNT has a number of different nested configuration properties, such as "tntPrimeByFire", "tntPrimeByPlayer", etc. It's fine to have a nested configuration for several, or all, of these properties. As mentioned above, all of them will inherit properties from their parent TNTPrimed configuration. So the configuration below will prevent the activation of all TNT blocks unless they were activated by redstone. The "tntPrimeByFire" nested configuration in this example inherits the "tntPrimePrevented" from its parent and so TNT will not be activated by fire (and wont spray fire everywhere).

    TNTPrimed:
        tntPrimePrevented: true

        tntPrimeByRedstone:
            tntPrimePrevented: false

        tntPrimeByFire:
            fire: true

Adding "debugConfig: true" to the config.yml file will printed out your configuration as the plugin sees it, and will highlight where the inheritance of properties occurs in nested configurations.

Permissions Based Configurations
--------------------------------

Support for permissions needs the Permissions plugin to be installed, or some other compatible permissions plugin that has disguised itself as the Permissions plugin.

The "permissionsBasedConfigs" property can be used within a "tntPrimeByHand" nested configuration. It lets certain configurations be applied, provided those players have the necessary permission, or belong to the necessary group, for the configuration.

The HigherExplosives plugin does not mandate any specific permission node names or group names, instead you can use anything you like, including those that are already used by other plugins.

Below is a substantial annotated example with two different permissions:

entities:
    TNTPrimed:
        playerDamageMultiplier: 0.0 # All nested configs will inherit this property unless overridden

        tntPrimeByHand:
            yield: 0.0  # Any permissions based configs will inherit this property too

            # Follows with an ordered list of extra configs for players with specific permissions/groups
            # If a player has both the 'miner.ore' permission and is in the 'bomb.disposal' group, then
            # just the 'bomb.disposal' config is applied, but it will inherit all the properties from the
            # 'miner.ore' config.
            permissionsBasedConfigs:

            - withPermission: 'miner.ore'  # Only active for players with the "miner.org" permission node
              useConfig:       # Always drops ore blocks
                  yieldSpecific:
                      15: 1.0  # Iron ore
                      16: 1.0  # Coal ore
                      14: 1.0  # Gold ore
                      56: 1.0  # Diamond ore, etc.

            - withGroup: 'bomb.disposal'     # Only active for players in the "bomb.disposal" group
              useConfig:                     # Configure TNT to be unpredictable and dangerous for these players
                  tntFuseMultiplier:
                  - {chance: 0.2, value: 0.0}
                  - {chance: 0.8, value: 4.0}
                  playerDamageMultiplier: 1.0 # This overrides the inherited property


        tntPrimeByRedstone:  # Make careful detonation with redstone produce bigger blasts and explode instantly
            tntFuseMultiplier: 0.0
            radiusMultiplier: 2.0

        tntPrimeByFire:   # Disable TNT detonation by fire
            tntPrimePrevented: true

        tntPrimeByExplosion:   # Disable TNT detonation by explosion (though the TNT block will be destroyed)
            tntPrimePrevented: true

In this example there are several nested configurations, but only "tntPrimeByHand" can contain the "permissionsBasedConfigs" property. "permissionsBasedConfigs" contains a list of configurations, where each item begins with a "-" and contains two or three properties called "withPermission", "withGroup", and "useConfig". "useConfig" contains a nested configuration to be used for any players that have the permission named by "withPermission" and belong to the group named by "withGroup". At least one of "withPermission" or "withGroup" must be present, but if they are both present then the player must satisfy both of them for the nested configuration to be used.

In the example above, players who have the "miner.ore" permission and who activate TNT with their hand will find that blocks caught in the explosions will not drop anything unless they're blocks of ore, in which case they will always drop ore. The nested configuration for "miner.ore" inherits both the "yield" property and the "playerDamageMultiplier" property from its parent "tntPrimeByHand" configuration.

In a similar way, players who are members of the "bomb.disposal" group will find that TNT can damage them. They'll also find that the fuse duration of the primed TNT is usually twice as long as normal, but sometimes the TNT will explode immediately. The "bomb.disposal" nested config will inherit properties from the "tntPrimeByHand" config, so the block yield will be 0.0 in any blast.

If there is a player who has both the "miner.ore" permission and belongs to the "bomb.disposal" group, then they will cause both of the permissions based nested configs to apply. In such a case, the "bomb.disposal" nested configuration will be used, but it will inherit any properties from the "miner.ore" configuration above it. The "miner.ore" configuration still inherits from the "tntPrimeByHand", which still inherits from the root "TNTPrimed" config.

The ordering of the items in the "permissionsBasedConfigs" list is important if you expect some players to have permissions for more than one config. Where multiple permissions based configs apply, they will form a chain of inheritance. This chain begins with the lowest matching permission config, which then inherits properties from the next highest matching permission config. The highest matching permission config will then inherit from the "tntPrimeByHand" config.

So, for example, the configuration below will cause players who have "dirty.bomb" and "trigger.tnt" permissions, but not "non.flammable" permissions to have explosions with fire sprayed everywhere. If players have all three permissions, they would have explosions without fire, as the "non.flammable" overrides the "dirty.bomb". If a player does not have the "trigger.tnt" permission, then they will not even be able to trigger the TNT by hand.

    TNTPrimed:
        tntPrimeByHand:
           tntPrimePrevented: true
            permissionsBasedConfigs:
            - withPermission: 'dirty.bomb'
              useConfig:
                  fire: true
            - withPermission: 'non.flammable'
                  fire: false
            - withPermission: 'trigger.tnt'
              useConfig:
                  tntPrimePrevented: false

Changelog:
----------

Version 2.0
- Nested configurations allow completely different behaviour for TNT depending on whether it was activated by fire, player, redstone, or some other explosion.
- Permissions plugin support. Allows any number of configurations to be applied when a player's hand triggers a TNT block, so long as the player has the necessary permission and/or belongs to the necessary group.
- Charged creepers can now be specifically configured with the "creeperCharged" nested configuration.

Version 1.7
- The yield of specific block types can now be individually configured via the "yieldSpecific" property.
- Renamed the "trialTNTFuseMultiplier" config property to "tntFuseMultiplier"
- Massive internal restructuring of the code. Should be more lean and mean.

Version 1.6
- Experimental fuse length control with the "trialTNTFuseMultiplier" configuration property.
- Added control over item's damage with the "itemDamageMultiplier" configuration property.

Version 1.5.2
- Fixed explosion sounds when preventTerrainDamage is true

Version 1.5.1
- Works with the MiningTNT plugin. If there is no yield configuration in HigherExplosives' config.yml, the explosion's yield will be set to 1.0 (MiningTNT's default yield).
- Events cancelled by other plugins are now not processed

Version 1.5
- Support for completely preventing terrain damage via the "preventTerrainDamage" configuration key.
- Support for player damage control via "playerDamageMultiplier" configuration (uses same configuration style as the radiusMultiplier).
- Support for creature damage control via "creatureDamageMultiplier" configuration (uses same configuration style as the radiusMultiplier).
- Made the output from debugConfig:true more readable.
- Number of event listeners registered is now more efficient. They're only registered if something in the configuration requires them.
- The "everyExplosion" and "yieldActiveBounds" properties are no longer used. Instead,  the "yield" property can now be set on the entities themselves.

Version 1.4
- Support for setting probabilities for different blast radii

Version 1.3.1
- Fixed a configuration bug with single world configurations.

Version 1.3
- Support for multiple world configurations
- Added a debugConfig boolean configuration property for checking and diagnosing the configuration.

Version 1.2
- Added optional bounds checking for explosions (the "activeBounds" property). If the explosion epicentre is within the allowed bounds then the explosion modifications are applied.
- The "everyExplosionYield" configuration key has changed to "everyExplosion.yield".
- New "everyExplosion.yieldChangeActiveBounds" property controls areas in which explosions will have their yield modified
- Config files are automatically upgraded from versions 1.0 and 1.1 to 1.2.

Version 1.1
- Fixed a bug where all explosions were doubled regardless of configuration.

Version 1.0
- Can control size of explosions
- Can control yield of all explosions

toadmess (https://github.com/toadmess)
